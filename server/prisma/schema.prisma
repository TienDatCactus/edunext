generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  userId      Int          @id @map("_id")
  name        String
  email       String       @unique
  password    String
  FEID        String       @unique
  campusId    Int?
  classId     Int
  roleId      Int
  comments    Comment[]
  Course      Course[]
  submissions Submission[]
  timetable   Timetable[]
  campus      Campus?      @relation(fields: [campusId], references: [campusId])
  CourseClass CourseClass  @relation(fields: [classId], references: [classId])
  Role        Role         @relation(fields: [roleId], references: [roleId])
}

model Role {
  roleId   Int    @id @map("_id")
  roleName String
  users    User[]
}

model Campus {
  campusId   Int    @id @map("_id")
  campusName String
  users      User[]
}

model Semester {
  semesterId   Int      @id @map("_id")
  semesterName String
  year         String
  courses      Course[]
}

model Course {
  courseId     Int          @id @map("_id")
  courseName   String
  description  String?
  semesterId   Int
  instructorId Int?
  courseCode   String
  meetingId    Int[]
  Assignment   Assignment[]
  instructor   User?        @relation(fields: [instructorId], references: [userId])
  semester     Semester     @relation(fields: [semesterId], references: [semesterId])
  Lesson       Lesson[]
  Meeting      Meeting[]
  Question     Question[]
  Timetable    Timetable[]
}

model Meeting {
  meetingId   Int    @id @map("_id")
  courseId    Int
  meetingType String
  meetingLink String
  course      Course @relation(fields: [courseId], references: [courseId])
}

model Lesson {
  lessonId    Int           @id @map("_id")
  courseId    Int
  title       String
  tagId       Int?
  content     String?
  deadline    DateTime?
  course      Course        @relation(fields: [courseId], references: [courseId])
  Tag         Tag?          @relation(fields: [tagId], references: [tagId])
  LessonGroup LessonGroup[]
  Question    Question[]
}

model LessonGroup {
  lessonGroupId Int    @id @map("_id")
  lessonId      Int
  userId        Int[]
  lesson        Lesson @relation(fields: [lessonId], references: [lessonId])
}

model Question {
  questionId  Int          @id @map("_id")
  lessonId    Int
  courseId    Int
  content     String
  status      Boolean      @default(false)
  Course      Course       @relation(fields: [courseId], references: [courseId])
  lesson      Lesson       @relation(fields: [lessonId], references: [lessonId])
  submissions Submission[]
}

model Tag {
  tagId   Int      @id @map("_id")
  tagName String
  lessons Lesson[]
}

model Assignment {
  assignmentId Int       @id @map("_id")
  courseId     Int
  title        String
  description  String?
  startDate    DateTime?
  dueDate      DateTime?
  course       Course    @relation(fields: [courseId], references: [courseId])
}

model Submission {
  submissionId      Int       @id @map("_id")
  userId            Int
  questionId        Int
  submissionContent String
  submissionDate    DateTime? @default(now())
  comments          Comment[]
  Question          Question  @relation(fields: [questionId], references: [questionId])
  user              User      @relation(fields: [userId], references: [userId])
}

model CourseClass {
  classId   Int    @id @map("_id")
  className String
  students  User[]
}

model Timetable {
  timetableId Int      @id @map("_id")
  userId      Int
  time        DateTime
  courseId    Int
  course      Course   @relation(fields: [courseId], references: [courseId])
  user        User     @relation(fields: [userId], references: [userId])
}

model Comment {
  commentId      Int         @id @map("_id")
  userId         Int
  submissionId   Int?
  commentContent String
  commentDate    DateTime    @default(now())
  submission     Submission? @relation(fields: [submissionId], references: [submissionId])
  user           User        @relation(fields: [userId], references: [userId])
}
